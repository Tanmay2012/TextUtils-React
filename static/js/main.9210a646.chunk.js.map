{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","togglemode","aria-checked","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","mode","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","border","toLowerCase","newtext","document","getElementById","select","navigator","clipboard","writeText","split","join","state","wc","i","length","character","charAt","wordcount","Alert","alert","concat","word","lower","slice","capitalize","msg","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.9210a646.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { NavLink } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) \r\n{\r\n  return (\r\n      <nav className={`navbar navbar-expand-lg navbar-dark bg-dark`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <NavLink className=\"navbar-brand\" to=\"/\">{props.title}</NavLink> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <NavLink className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</NavLink> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" to=\"/about\">{props.aboutText}</NavLink>\r\n            </li> */}\r\n            </ul> \r\n            <div className={`form-check form-switch nav-item text-light`}>\r\n            <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" aria-checked=\"false\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes={\r\n      title: PropTypes.string,\r\n      aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps={\r\n      title: \"Set Ttile Here\",\r\n      aboutText: \"About\"\r\n}","import React, { useState } from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n      const [text, setText] = useState(\"\");\r\n      const wordcount=()=>{\r\n            if (text==='')\r\n            {\r\n                  return 0;\r\n            } \r\n             else\r\n            {\r\n                  let state= 'out';\r\n                  let wc=0;\r\n                  for(let i=0;i<text.length;i++)\r\n                  {\r\n                        let character=text.charAt(i);\r\n                        if (character === ' ' || character === '\\n' || character=== '\\t')\r\n                          state = 'out';\r\n                        else if(state==='out')\r\n                        {\r\n                              state='in';\r\n                              ++wc;\r\n                        }\r\n                  }\r\n                  return wc;\r\n            }\r\n      }\r\n      const handleOnChange=(event)=>{\r\n            setText(event.target.value);\r\n      }\r\n      const handleUpClick=()=>{\r\n            let newText=text.toUpperCase();\r\n            setText(newText);\r\n            props.showAlert(\"Converted to UpperCase!\",'success');\r\n      }\r\n      const handleLoClick=()=>{\r\n            let newText=text.toLowerCase();\r\n            setText(newText);\r\n            props.showAlert(\"Converted to LowerCase!\",'success');\r\n      }\r\n      const handleClearClick=()=>{\r\n            let newText=\"\";\r\n            setText(newText);\r\n            props.showAlert(\"Text cleared!\",'success');\r\n      }\r\n      const handleCopy=()=>{\r\n            let newtext=document.getElementById(\"myBox\")\r\n            newtext.select();\r\n            navigator.clipboard.writeText(newtext.value);\r\n            props.showAlert(\"Copied to Clipboard!\",'success');\r\n      }\r\n      const handleExtraSpaces=()=>{\r\n            let newText=text.split(/[ ]+/);\r\n            setText(newText.join(\" \"));\r\n            props.showAlert(\"Extra spaces removed!\",'success');\r\n      }\r\n  return (\r\n  <>\r\n  <div className=\"container\" style={{ color : props.mode==='dark'?'white':'black'}}>   \r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\" >\r\n      <textarea className=\"form-control\"  style={{backgroundColor : props.mode==='dark'?'#171717':'white',color:props.mode==='dark'?'white':'black'}}id=\"myBox\" value={text} onChange={handleOnChange} rows=\"7\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={handleUpClick} style={{backgroundColor : props.mode==='dark'?'#444444':'#0d6efd',border :props.mode==='dark'?'#444444':'#0d6efd'}}>Convert to Uppercase</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleLoClick} style={{backgroundColor : props.mode==='dark'?'#444444':'#0d6efd',border :props.mode==='dark'?'#444444':'#0d6efd'}}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary\" onClick={handleClearClick} style={{backgroundColor : props.mode==='dark'?'#444444':'#0d6efd',border :props.mode==='dark'?'#444444':'#0d6efd'}}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleCopy} style={{backgroundColor : props.mode==='dark'?'#444444':'#0d6efd',border :props.mode==='dark'?'#444444':'#0d6efd'}}>Copy Text</button>\r\n      <button className=\"btn btn-primary\" onClick={handleExtraSpaces} style={{backgroundColor : props.mode==='dark'?'#444444':'#0d6efd',border :props.mode==='dark'?'#444444':'#0d6efd'}}>Remove Extra Spaces</button>\r\n  </div>\r\n  <div className=\"container my-2\" style={{ color : props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{wordcount()} words and {text.length} characters</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n  </div>\r\n  </> \r\n  \r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n      const capitalize=(word)=>{\r\n            let lower=word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n      }\r\n  return (\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}               \r\n      </div>\r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route, \n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert= (message,type)=>{\n       setAlert({\n         msg: message,\n         type : type\n       })\n       setTimeout(() => {\n         setAlert(null)\n       }, 1500);\n  }\n  const togglemode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#171717';\n      showAlert(\"Dark mode has been enabled\",'success');\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",'success');\n    }\n  }\n  return (\n    <>\n   {/* <BrowserRouter> */}\n   <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode}/>\n   <Alert alert={alert}/>\n   <div className=\"container my-3\">\n   {/* <Routes> */}\n          {/* <Route exact path=\"/about\" element={<About />}/> */}\n          {/* <Route exact path=\"/\" element={<TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert}/>}/> */}\n          <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert}/>\n   {/* </Routes> */}\n   </div>\n   {/* </BrowserRouter> */}\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}